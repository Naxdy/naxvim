require('telescope').load_extension('dap')

local hl = vim.api.nvim_set_hl
local c = require('vscode.colors').get_colors()

-- General
hl(0, 'Function', { fg = c.vscYellowOrange, bg = 'NONE' })
hl(0, 'jsFuncCall', { fg = c.vscYellowOrange, bg = 'NONE' })
hl(0, '@function', { fg = c.vscYellowOrange, bg = 'NONE' })
hl(0, '@function.builtin', { fg = c.vscYellowOrange, bg = 'NONE' })
hl(0, '@function.macro', { fg = c.vscYellowOrange, bg = 'NONE' })
hl(0, '@function.method', { fg = c.vscYellowOrange, bg = 'NONE' })
hl(0, 'typescriptDecorator', { fg = c.vscYellowOrange, bg = 'NONE' })
hl(0, 'SpecialChar', { fg = c.vscYellowOrange, bg = 'NONE' })
hl(0, 'Statement', { fg = c.vscBlue, bg = 'NONE' })
hl(0, '@operator', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'Conditional', { fg = c.vscBlue, bg = 'NONE' })
hl(0, '@keyword.conditional', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'Keyword', { fg = c.vscBlue, bg = 'NONE' })
hl(0, '@keyword.return', { fg = c.vscBlue, bg = 'NONE' })
hl(0, '@keyword.import', { fg = c.vscBlue, bg = 'NONE' })
hl(0, '@keyword.repeat', { fg = c.vscBlue, bg = 'NONE' })
hl(0, '@lsp.typemod.keyword.controlFlow', { fg = c.vscBlue, bg = 'NONE' })
hl(0, '@keyword.exception', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'Operator', { fg = c.vscBlue, bg = 'NONE' })
hl(0, '@variable', { fg = c.vscYellow, bg = 'NONE' })
hl(0, '@variable.parameter', { fg = c.vscYellow, bg = 'NONE' })
hl(0, '@constant', { fg = c.vscDisabledBlue, bg = 'NONE' })

-- Regex
hl(0, '@punctuation.bracket.regex', { link = 'String' })
hl(0, '@punctuation.delimiter.regex', { link = 'String' })
hl(0, '@string.escape.regex', { link = 'String' })

-- Bash
hl(0, '@variable.builtin.bash', { link = '@variable' })

-- Typescript
hl(0, '@attribute.typescript', { fg = c.vscYellowOrange, bg = 'NONE' })
hl(0, 'typescriptExport', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'typescriptBinaryOp', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'typescriptTemplateSB', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'typescriptAssign', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'typescriptImport', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'typescriptCastKeyword', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'typescriptTypeAnnotation', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'typescriptCall', { fg = c.vscFront, bg = 'NONE' })
hl(0, 'typescriptClassBlock', { fg = c.vscFront, bg = 'NONE' })
hl(0, 'typescriptBlock', { fg = c.vscFront, bg = 'NONE' })
hl(0, 'typescriptFuncComma', { fg = c.vscFront, bg = 'NONE' })
hl(0, 'typescriptIdentifierName', { fg = c.vscBlueGreen, bg = 'NONE' })
hl(0, '@lsp.type.enumMember.typescript', { fg = c.vscYellowOrange, bg = 'NONE' })
hl(0, '@lsp.type.enumMember.typescriptreact', { fg = c.vscYellowOrange, bg = 'NONE' })
hl(0, '@lsp.typemod.type.defaultLibrary.typescript', { fg = c.vscBlueGreen, bg = 'NONE' })
hl(0, '@punctuation.special.typescript', { fg = c.vscBlue, bg = 'NONE' })
hl(0, '@lsp.typemod.variable.readonly.typescript', { link = '@variable' })
hl(0, '@lsp.typemod.property.readonly.typescript', {})
hl(0, '@punctuation.delimiter.jsdoc', {})
hl(0, '@lsp.typemod.variable.readonly.typescriptreact', { link = '@variable' })
hl(0, '@constant.typescript', { link = '@variable' })
hl(0, '@punctuation.special.tsx', { fg = c.vscBlue, bg = 'NONE' })
hl(0, '@i18n.t', { fg = c.vscDimHighlight, bg = 'NONE' })

-- nix
hl(0, 'nixFunctionCall', { fg = c.vscYellow, bg = 'NONE' })
hl(0, 'nixInterpolation', { fg = c.vscYellow, bg = 'NONE' })
hl(0, 'nixInterpolationParam', { fg = c.vscYellow, bg = 'NONE' })
hl(0, 'nixStringDelimiter', { link = 'String' })
hl(0, 'nixSimpleStringSpecial', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'nixInterpolationDelimiter', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'nixNamespacedBuiltin', { fg = c.vscYellowOrange, bg = 'NONE' })
hl(0, 'nixSimpleBuiltin', { fg = c.vscYellowOrange, bg = 'NONE' })
hl(0, 'nixBuiltin', { fg = c.vscBlueGreen, bg = 'NONE' })
hl(0, 'nixOperator', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'nixInteger', { fg = c.vscLightGreen, bg = 'NONE' })
hl(0, '@lsp.type.path.nix', { fg = c.vscPink, bg = 'NONE' })
hl(0, '@punctuation.special.nix', { fg = c.vscBlue, bg = 'NONE' })

-- JavaScript
hl(0, 'javaScriptBraces', { fg = c.vscFront, bg = 'NONE' })
hl(0, 'javaScriptExport', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'javaScriptBinaryOp', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'javaScriptTemplateSB', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'javaScriptAssign', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'javaScriptImport', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'javaScriptCastKeyword', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'javaScriptTypeAnnotation', { fg = c.vscBlue, bg = 'NONE' })
hl(0, 'javaScriptCall', { fg = c.vscFront, bg = 'NONE' })
hl(0, 'javaScriptClassBlock', { fg = c.vscFront, bg = 'NONE' })
hl(0, 'javaScriptBlock', { fg = c.vscFront, bg = 'NONE' })
hl(0, 'javaScriptIdentifierName', { fg = c.vscBlueGreen, bg = 'NONE' })
hl(0, '@lsp.type.enumMember.javascript', { fg = c.vscYellowOrange, bg = 'NONE' })
hl(0, '@lsp.typemod.variable.readonly.javascript', { fg = c.vscYellow, bg = 'NONE' })
hl(0, '@lsp.typemod.property.readonly.javascript', {})
hl(0, '@lsp.typemod.type.defaultLibrary.javascript', { fg = c.vscBlueGreen, bg = 'NONE' })

-- svelte
hl(0, '@lsp.typemod.variable.readonly.svelte', { link = '@variable' })
hl(0, '@lsp.typemod.property.readonly.svelte', {})
hl(0, '@tag.attribute.control.svelte', { fg = c.vscBlue, bg = 'NONE' })
hl(0, '@tag.attribute.control.svelte.property', { fg = c.vscLightBlue, bg = 'NONE' })
hl(0, '@punctuation.bracket.svelte', { fg = c.vscBlue, bg = 'NONE' })

-- rust
hl(0, '@lsp.type.static.rust', { link = '@variable' })
hl(0, '@lsp.type.macro.rust', { link = 'Macro' })
hl(0, '@lsp.type.const.rust', { link = '@constant' })
hl(0, '@lsp.typemod.attributeBracket.attribute.rust', { fg = c.vscBlueGreen, bg = 'NONE' })
hl(0, 'rustAttribute', { fg = c.vscBlueGreen, bg = 'NONE' })
hl(0, 'rustModPath', { fg = c.vscBlueGreen, bg = 'NONE' })
hl(0, 'rustMacroVariable', { fg = c.vscLightBlue, bg = 'NONE' })
hl(0, 'rustMacroRepeatDelimiters', { fg = c.vscBlue, bg = 'NONE' })
hl(0, '@lsp.type.formatSpecifier.rust', { fg = c.vscBlue, bg = 'NONE' })
hl(0, '@lsp.type.lifetime.rust', { link = 'Special' })
hl(0, '@string.escape.rust', { link = 'Special' })
hl(0, '@lsp.type.enumMember.rust', { fg = c.vscYellowOrange, bg = 'NONE' })
hl(0, '@function.macro.rust', {})
hl(0, '@punctuation.delimiter.rust', {})
hl(0, '@variable.rust', {})
hl(0, '@tparams.rust', { fg = c.vscFront, bg = 'NONE' })
hl(0, '@lsp.type.builtinType.rust', { fg = c.vscBlue, bg = 'NONE' })
hl(0, '@closure.rust', { fg = c.vscBlue, bg = 'NONE' })
hl(0, '@lsp.typemod.decorator.attribute.rust', { link = '@attribute' })
hl(0, '@lsp.typemod.method.attribute.rust', { link = '@function.method' })
hl(0, '@lsp.typemod.method.mutable.rust', { underline = false })
hl(0, '@lsp.typemod.selfKeyword.mutable.rust', { underline = true })
hl(0, '@lsp.typemod.parameter.mutable.rust', { underline = true })
hl(0, '@lsp.typemod.variable.mutable.rust', { underline = true })
hl(0, '@lsp.typemod.static.mutable.rust', { underline = true })
hl(0, '@lsp.typemod.deriveHelper.library.rust', { fg = c.vscBlueGreen, bg = 'NONE' })
hl(0, '@lsp.typemod.deriveHelper.attribute.rust', { fg = c.vscBlueGreen, bg = 'NONE' })
hl(0, 'rustDerive', {})
hl(0, 'preProc', {})
hl(0, '@lsp.typemod.procMacro.library.rust', { link = 'Macro' })
